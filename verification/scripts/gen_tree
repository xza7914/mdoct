#!/usr/bin/python3

# @author xieziang <xza7914@163.com>
# @date 2023.10.20

import json
import sys

def show_usage():
    print("Usage: ./gen_tree \033[4msource.json\033[0m")

def parse(node: dict, f):
    name = node["name"]
    f.write("\tstruct tree_node *{} = malloc(sizeof(struct tree_node));\n".format(name))
    f.write("\t__CPROVER_assume({} != NULL);\n".format(name))
    f.write("\n")

    if node.get("children", None) == None:
        return

    children = node["children"]
    
    f.write("\t{}->len = {};\n".format(name, len(children)))
    f.write("\t{}->children = malloc(sizeof(struct item) * {});\n"
            .format(name, len(children)))
    f.write("\t__CPROVER_assume({}->children != NULL);\n".format(name))
    f.write("\n")

    for i, child in enumerate(children):
        parse(child, f)
        f.write("\t{}->children[{}].child = {};\n".format(name, i, child["name"]))
        f.write("\n")


def main():
    if len(sys.argv) != 2:
        show_usage()
        return

    file_name = sys.argv[1]

    with open(file_name, "r") as f:
        a = json.load(f)

    f = open("../tools/build_tree.c", "w")

    f.write("\n")
    f.write("// generated by gen_tree from {}\n".format(file_name))
    f.write("\n")
    f.write("#include <stdlib.h>\n")
    f.write("#include \"state_tree.h\"\n")
    f.write("\n")
    f.write("struct tree_node *build_tree()\n")
    f.write("{\n")

    parse(a, f)

    f.write("\nreturn root;\n")
    f.write("\n")
    f.write("}\n")

if __name__ == "__main__":
    main()

